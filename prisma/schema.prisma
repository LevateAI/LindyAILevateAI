// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?
  avatar      String?
  ownerId     String
  n8nUrl      String?
  n8nApiKey   String?
  webhookSecret String?

  // Billing fields
  stripeCustomerId String?
  stripeSubscriptionId String?
  subscriptionStatus String? @default("free")
  subscriptionPlan String? @default("free")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User         @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  memberships Membership[]
  workflows   Workflow[]
  runs        Run[]
  templates   Template[]
  requests    Request[]
  connections Connection[]
  secrets     EncryptedSecret[]

  @@map("workspaces")
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

model Membership {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  role        Role     @default(VIEWER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("memberships")
}

enum WorkflowStatus {
  ACTIVE
  PAUSED
  DRAFT
  ERROR
}

enum TriggerType {
  WEBHOOK
  SCHEDULE
  EVENT
  MANUAL
}

model Workflow {
  id          String         @id @default(cuid())
  workspaceId String
  name        String
  description String?
  status      WorkflowStatus @default(DRAFT)
  triggerType TriggerType
  triggerConfig Json?
  steps       Json           @default("[]")
  envVars     Json           @default("{}")
  secretRefs  Json           @default("{}")
  tags        String[]       @default([])
  version     Int            @default(1)
  lastRunAt   DateTime?
  n8nWorkflowId String?
  webhookUrl  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  runs      Run[]

  @@map("workflows")
}

enum RunStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

model Run {
  id            String    @id @default(cuid())
  workflowId    String
  workspaceId   String
  status        RunStatus @default(PENDING)
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  durationMs    Int?
  inputPayload  Json?
  outputPayload Json?
  error         String?
  correlationId String?
  n8nExecIds    String[]  @default([])
  signatureOK   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  workflow  Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("runs")
}

enum TemplateCategory {
  EMAIL_CRM
  CALENDAR
  ECOMMERCE
  OPERATIONS
  DATA_SYNC
  SOCIAL_MEDIA
  ANALYTICS
  AUTOMATION
}

model Template {
  id                  String           @id @default(cuid())
  workspaceId         String?
  title               String
  summary             String
  description         String?
  category            TemplateCategory
  apps                String[]         @default([])
  templateConfig      Json
  estimatedSetupMins  Int              @default(15)
  difficulty          String           @default("Beginner")
  isPublic            Boolean          @default(true)
  usageCount          Int              @default(0)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // Relations
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("templates")
}

enum RequestStatus {
  NEW
  TRIAGE
  PROPOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RequestPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Request {
  id          String          @id @default(cuid())
  workspaceId String
  title       String
  description String
  apps        String[]        @default([])
  priority    RequestPriority @default(MEDIUM)
  budgetUsd   Int?
  status      RequestStatus   @default(NEW)
  contactEmail String?
  contactPhone String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("requests")
}

enum ConnectionType {
  N8N
  GOOGLE
  SLACK
  DISCORD
  OPENAI
  WEBHOOK
  HTTP
  EMAIL
  CALENDAR
}

model Connection {
  id          String         @id @default(cuid())
  workspaceId String
  name        String
  type        ConnectionType
  config      Json           @default("{}")
  isHealthy   Boolean        @default(false)
  lastChecked DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("connections")
}

model EncryptedSecret {
  id          String   @id @default(cuid())
  workspaceId String
  key         String
  ciphertext  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, key])
  @@map("encrypted_secrets")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
